// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type FriendRequest {
  senderId    String
  senderImage String
  senderName  String
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  hashPassword    String?
  email           String?         @unique
  emailVerified   DateTime?
  image           String?         @default("/images/placeholder.jpg")
  createdAt       DateTime        @default(now()) @updatedAt
  updatedAt       DateTime        @updatedAt
  birthday        DateTime?
  addressStreet   String?         @default("Hahagana 35, Tel-aviv")
  country         String?         @default("Israel")
  friendsIds      String[]        @db.ObjectId
  friendsRequests FriendRequest[]
  opinionsIds     String[]        @db.ObjectId
  opinions        Opinion[]

  accounts         Account[]
  politicalProfile PoliticalProfile?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Opinion {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  topics    String[]
  authorId  String    @db.ObjectId
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now()) @updatedAt
}

model Like {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  opinionId   String  @db.ObjectId
  opinion     Opinion @relation(fields: [opinionId], references: [id])
  authorId    String  @db.ObjectId
  authorName  String
  authorImage String
}

model Comment {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  comment     String
  opinion     Opinion @relation(fields: [opinionId], references: [id])
  opinionId   String  @db.ObjectId
  authorId    String  @db.ObjectId
  authorName  String
  authorImage String
}

type PoliticalProfile {
  religion         String
  PoliticalOpinion PoliticalType[]
  ideology         String
  userId           String
}

enum PoliticalType {
  LEFT
  RIGHT
  LIBERTARIAN
  CENTRIST
  CONSERVATIVE
  PROGRESSIVE
  SOCIALIST
  GREEN
  NATIONALIST
  FASCIST
  ANARCHIST
  SOCIALDEMOCRAT
  COMMUNIST
  MODERATE
  RADICAL
  POPULIST
  NEOCONSERVATIVE
  NEOPOPULIST
}
